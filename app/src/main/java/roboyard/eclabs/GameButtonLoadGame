package roboyard.eclabs;

import android.app.Activity;
import android.content.Context;
import android.graphics.drawable.Drawable;
import android.view.MotionEvent;

import timber.log.Timber;

/**
 * Represents a button to load a saved game.
 * This class is specifically for loading games and does not handle saving or displaying minimaps.
 */
public class GameButtonLoadGame extends GameButtonGoto {

    private final int defaultImageUp;
    private final int defaultImageDown;
    private final String mapPath;
    private final int buttonNumber;
    private Context context;
    private Activity activity;
    private SaveGameScreen saveGameScreen;

    public GameButtonLoadGame(Context context, int x, int y, int w, int h, int imageUp, int imageDown, String mapPath, int buttonNumber) {
        super(x, y, w, h, imageUp, imageDown, 4); // 4 is the target screen for GridGameScreen
        this.defaultImageUp = imageUp;
        this.defaultImageDown = imageDown;
        this.mapPath = mapPath;
        this.buttonNumber = buttonNumber;
        this.context = context;
        this.activity = (Activity)context;
    }

    /**
     * Handles the click event of the button.
     * @param gameManager The GameManager instance.
     */
    @Override
    public void onClick(GameManager gameManager) {
        // Update activity reference
        activity = gameManager.getActivity();
        
        GridGameScreen gameScreen = (GridGameScreen) gameManager.getScreens().get(Constants.SCREEN_GAME);
        SaveGameScreen saveGameScreen = (SaveGameScreen) gameManager.getScreens().get(Constants.SCREEN_SAVE_GAMES);
        this.saveGameScreen = saveGameScreen;

        // Load the saved game
        SaveManager saver = new SaveManager(gameManager.getActivity());
        if (saver.getMapsStateSaved(mapPath, "mapsSaved.txt")) {
            super.onClick(gameManager);
            gameScreen.setSavedGame(mapPath);
        }
    }

    /**
     * Handles the click event of the button.
     * @deprecated Use onClick(GameManager) instead
     */
    @Deprecated
    public void onClick() {
        // Deprecated method, use onClick(GameManager) instead
        // This is kept for backward compatibility
    }

    @Override
    public void create() {
        super.create();
        
        // Check if save file exists
        if (activity == null && context instanceof Activity) {
            activity = (Activity)context;
        }

        if(mapPath == null || mapPath.isEmpty()) {
            // nothing to do on empty slots
            return;
        }
        
        // Check if the save file exists
        String saveData = FileReadWrite.readPrivateData(activity, mapPath);
        if (saveData != null && !saveData.isEmpty()) {
            // Enable the button if save data exists
            this.setEnabled(true);
        } else {
            // Disable the button if no save data exists
            this.setEnabled(false);
        }
    }

    @Override
    public void update(GameManager gameManager) {
        super.update(gameManager);
    }

    /**
     * Set the SaveGameScreen reference
     * @param saveGameScreen The SaveGameScreen instance
     */
    public void setSaveGameScreen(SaveGameScreen saveGameScreen) {
        this.saveGameScreen = saveGameScreen;
    }

    /**
     * Get the button number for this load slot
     * @return The button number
     */
    public int getButtonNumber() {
        return buttonNumber;
    }

    /**
     * Get the map name associated with this button
     * @return the map name
     */
    public String getMapName() {
        return mapPath;
    }
    
    /**
     * Get the slot ID for this button
     * @return the slot ID
     */
    public int getSlotId() {
        return buttonNumber;
    }
}